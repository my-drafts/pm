ТЕМИ РОБІТ СТУДЕНТІВ НА 2016 РІК

Вибір теми роботи
Теми роботи закріплюються викладачем за пропозиціями студентів. Кожен студент має запропонувати 3 бажані теми в порядку пріоритетності, і якщо ці теми не будуть вже зайняті (одна і та сама тема допускається не більш ніж у двох студентів з однієї групи), викладач закріплює одну з них за студентом.

Мова програмування
Усі лабораторні роботи виконуються на двох мовах програмування: на мові C++ та на одній з інших об’єктно-орієнтованих мов - на вибір студента (Java, C#, python, JavaScript або ін.). Курсова робота виконується на одній з об’єктно-орієнтованих мов на вибір студента.

Порядок допуску до захисту робіт
Перед захистом усі вихідні коди, коментарі, діаграми та ін. документи слід завантажити на репозитарій (bitbucket.org) для попередньої перевірки викладачем, та повідомити викладача про готовність до захисту. Викладач за кілька днів перевіряє доступні на репозитарії матеріали та повідомляє студента про допуск до захисту або про необхідність усунення недоліків.

Лабораторна робота №1. Створення та знищення об'єктів. Композиція.
Розробити 2-3 класи для вирішення завдання згідно варіанту. Принаймні 2 класи мають перебувати у відношенні композиції чи агрегації. Намалювати UML-діаграму класів. Класи повинні містити різні види конструкторів, деструктор, закриті поля (відкриті - на розсуд студента), відповідні методи-селектори та методи-модифікатори. Реалізувати коректну обробку виключних ситуацій, наприклад, в конструкторі. Реалізувати хоча б одну тестову програму-сценарій з використанням розроблених класів, що доводила б коректність функціонування об’єктів. Виконання програми повинно супроводжуватись виведенням на екран відповідних діагностичних повідомлень. Інтерактивний режим взаємодії з користувачем - не реалізовувати.

Лабораторна робота №2. Наслідування. 
Доповнити діаграму класів, розроблених у попередній роботі, ще 2-3 або більше класами, що складають ієрархію наслідування - для виконання завдання згідно варіанту. Проілюструвати нову ієрархію оновленою UML-діаграмою. Реалізувати хоча б одну тестову програму-сценарій з використанням розроблених класів, що доводила б коректність виконання завдання. Інтерактивний режим взаємодії з користувачем - не реалізовувати.

Лабораторна робота №3. Динамічні структури даних. Узагальнене програмування. Поліморфізм.
Розширити код, створений в попреденіх роботах, для вирішення завдання згідно варіанту за допомогою поліморфізму та динамічних структур даних. Доцільне використання патернів проектування - заохочується. Включити, по можливості, в код елементи узагальненого програмування (шаблони C++, Java/C# generics). Обгрунтувати вибір структур даних. Реалізувати кілька тестових програм-сценаріїв з використанням нових розроблених класів, що доводили б коректність виконання завдання. Інтерактивний режим взаємодії з користувачем - не реалізовувати.

Курсова робота.
Розширити код, створений в лабораторних роботах, для реалізації програми з графічним інтерфейсом користувача.

Тематика завдань
Студентам дозволяється творчо підходити до поставлених завдань та вносити обгрунтовані (узгоджені з викладачем) зміни до них в разі необхідності. Обов’язковим є: наявність композиції (ЛР№1), наслідування (ЛР№2), поліморфізму (ЛР№3).

-----

Дмитрий Николаенко, [17.12.16 18:40]
“Пакмен” 
Програма-гра, в якій гравець переміщується лабіринтом у пошуках “клітинок їжі”, в той час як за ним полюють кілька ворогів, дотик до яких означатиме загибель гравця. Існують особливі “клітинки їжі”, які дозволяють гравцю деякий час полювати на ворогів та тимчасово їх знищувати. Студенту пропонується творчо змінити чи розширити правила та ввести в гру додаткові типи клітинок (бонуси, +1 / -1 ворог, сповільнення ворогів тощо) та ворогів (різний алгоритм переміщення). 
ЛР№1: реалізувати класи клітинки, гравця, ворога тощо.
ЛР№2: побудувати ієрархію наслідування різних видів клітинок та ворогів.
ЛР№3: реалізувати поліморфну поведінку ворогів та клітинок для кожного “такту” гри.
КР: Графічна візуалізація гри.

